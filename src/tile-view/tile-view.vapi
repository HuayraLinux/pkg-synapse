/* tile-view.vapi generated by valac-0.10 0.10.4, do not modify. */

[CCode (cprefix = "UI", lower_case_cprefix = "ui_")]
namespace UI {
	[CCode (cprefix = "UIWidgets", lower_case_cprefix = "ui_widgets_")]
	namespace Widgets {
		[CCode (cheader_filename = "tile-view.h")]
		public abstract class AbstractTileObject : GLib.Object {
			public AbstractTileObject ();
			public void add_user_button (Gtk.Button button);
			public GLib.List<weak Gtk.Button> get_extra_buttons ();
			public void remove_user_button (Gtk.Button button);
			public string add_button_stock { get; set; }
			public string add_button_tooltip { get; set; }
			public string description { get; set; }
			public bool enabled { get; set; }
			public Gdk.Pixbuf force_pixbuf { get; set; }
			public string icon { get; set; }
			public string name { get; set; }
			public string remove_button_stock { get; set; }
			public string remove_button_tooltip { get; set; }
			public bool show_action_button { get; set; }
			public string sub_description_text { get; set; }
			public string sub_description_title { get; set; }
			public virtual signal void active_changed ();
			public signal void buttons_updated ();
			public signal void icon_updated ();
			public signal void text_updated ();
		}
		[CCode (cheader_filename = "tile-view.h")]
		public class Tile : Gtk.Table {
			public Tile (UI.Widgets.AbstractTileObject obj, int icon_size);
			protected override bool expose_event (Gdk.EventExpose event);
			protected override void realize ();
			public void set_selected (bool selected);
			public void update_state ();
			public bool last { get; set; }
			public UI.Widgets.AbstractTileObject owned_object { get; set; }
			public UI.Widgets.TileView owner { get; set; }
			public signal void active_changed ();
		}
		[CCode (cheader_filename = "tile-view.h")]
		public class TileView : Gtk.EventBox {
			protected int selected_index;
			public TileView ();
			public virtual void append_tile (UI.Widgets.AbstractTileObject tile_obj);
			public void clear ();
			public virtual void clear_selection ();
			public virtual UI.Widgets.AbstractTileObject? get_current_tile ();
			public GLib.List<weak UI.Widgets.AbstractTileObject> get_tiles ();
			protected bool on_button_press (Gdk.EventButton event);
			protected bool on_key_press (Gdk.EventKey event);
			public virtual void on_tile_active_changed (UI.Widgets.Tile tile);
			public virtual void on_tile_size_allocated (Gtk.Widget w, Gdk.Rectangle alloc);
			public virtual void remove_tile (UI.Widgets.AbstractTileObject tile_obj);
			public void select (int index);
			protected override void style_set (Gtk.Style? prev_style);
			public int icon_size { get; set construct; }
		}
		[CCode (cheader_filename = "tile-view.h")]
		public class WrapLabel : Gtk.Label {
			public WrapLabel ();
			protected override void size_allocate (Gdk.Rectangle allocation);
			protected override void size_request (out Gtk.Requisition req);
			public bool wrap { get; set construct; }
		}
	}
}
