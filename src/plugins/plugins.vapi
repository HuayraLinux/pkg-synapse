/* plugins.vapi generated by valac 0.10.4, do not modify. */

[CCode (cprefix = "Synapse", lower_case_cprefix = "synapse_", gir_namespace = "SynapseCore", gir_version = "1.0")]
namespace Synapse {
	[CCode (cheader_filename = "plugins.h")]
	public class BansheeActions : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public BansheeActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class CalculatorPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public CalculatorPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class CommandPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public CommandPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DesktopFilePlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public DesktopFilePlugin ();
		public signal void load_complete ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DevhelpPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public DevhelpPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DictionaryPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public DictionaryPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class DirectoryPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public DirectoryPlugin ();
		protected override void constructed ();
		public Synapse.DataSink data_sink { get; construct; }
		public signal void zeitgeist_search_complete (Synapse.ResultSet? rs, uint query_id);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class GnomeScreenSaverPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public GnomeScreenSaverPlugin ();
		public static void lock_screen ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class GnomeSessionPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public GnomeSessionPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class HelloWorldPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public HelloWorldPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class HybridSearchPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public HybridSearchPlugin ();
		protected override void constructed ();
		public Synapse.DataSink data_sink { get; construct; }
		public bool processing_query { get; set; }
		public signal void zeitgeist_search_complete (Synapse.ResultSet? rs, uint query_id);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ImgUrPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public ImgUrPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class LaunchpadPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public LaunchpadPlugin ();
		public Gtk.Widget create_config_widget ();
		public Synapse.ResultSet? find_for_match (Synapse.Query query, Synapse.Match match);
	}
	[CCode (cheader_filename = "plugins.h")]
	public class LocatePlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public LocatePlugin ();
		public async Synapse.ResultSet? locate (Synapse.Query q) throws Synapse.SearchError;
	}
	[CCode (cheader_filename = "plugins.h")]
	public class OpenSearchPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public OpenSearchPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class PastebinPlugin : GLib.Object, Synapse.Activatable, Synapse.ActionProvider {
		public PastebinPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class RhythmboxActions : GLib.Object, Synapse.Activatable, Synapse.ItemProvider, Synapse.ActionProvider {
		public RhythmboxActions ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class SelectionPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public SelectionPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class SystemManagementPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public SystemManagementPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class TestSlowPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public TestSlowPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	public class ZeitgeistPlugin : GLib.Object, Synapse.Activatable, Synapse.ItemProvider {
		public ZeitgeistPlugin ();
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.freedesktop.ConsoleKit.Manager")]
	public interface ConsoleKitObject : GLib.Object {
		public const string INTERFACE_NAME;
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async bool can_restart () throws DBus.Error;
		public abstract async bool can_stop () throws DBus.Error;
		public abstract void restart () throws DBus.Error;
		public abstract void stop () throws DBus.Error;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.gnome.ScreenSaver")]
	public interface GnomeScreenSaver : GLib.Object {
		public const string INTERFACE_NAME;
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async void @lock () throws DBus.Error;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.gnome.SessionManager")]
	public interface GnomeSessionManager : GLib.Object {
		public const string INTERFACE_NAME;
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract bool can_shutdown () throws DBus.Error;
		public abstract void logout (uint32 mode = 0) throws DBus.Error;
		public abstract void request_reboot () throws DBus.Error;
		public abstract void shutdown () throws DBus.Error;
	}
	[CCode (cheader_filename = "plugins.h")]
	[DBus (name = "org.freedesktop.UPower")]
	public interface UPowerObject : GLib.Object {
		public const string INTERFACE_NAME;
		public const string OBJECT_PATH;
		public const string UNIQUE_NAME;
		public abstract async void about_to_sleep () throws DBus.Error;
		public abstract async void hibernate () throws DBus.Error;
		public abstract async bool hibernate_allowed () throws DBus.Error;
		public abstract async void suspend () throws DBus.Error;
		public abstract async bool suspend_allowed () throws DBus.Error;
	}
}
